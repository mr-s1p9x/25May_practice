#include <iostream>
using namespace std;

// Делегирование метода

// Определение класса Point, который демонстрирует делегирование методов в конструкторах.
class Point
{
    // private: // состояние объекта. РЕАЛИЗАЦИЯ
    int x; // Приватная переменная для хранения координаты X.
    int y; // Приватная переменная для хранения координаты Y.
    int z; // Приватная переменная для хранения координаты Z.
public: // Интерфейс класса

    ~Point()
    {
        cout << "Destructor\n";
    }

    // Конструктор по умолчанию
    Point()
    {
        cout << "Construct\n";  // Вывод сообщения при вызове конструктора.
        x = y = 0;  // Инициализация переменных x и y значением 0.
    }

    // Конструктор с одним параметром для инициализации координаты X.
    Point(int x1)
    {
        cout << "Construct X\n";  // Вывод сообщения при вызове конструктора.
        x = x1; // Инициализация переменной x значением x1.
    }

    // Конструктор с двумя параметрами для инициализации координат X и Y. Делегирует инициализацию X конструктору
    // с одним параметром.
    Point(int x1, int y1):Point(x1)
    {
        cout << "Construct Y\n"; // Вывод сообщения при вызове конструктора.
        y = y1; // Инициализация переменной y значением y1.
    }

    // Конструктор с тремя параметрами для инициализации координат X, Y и Z.
    // Делегирует инициализацию X и Y конструктору с двумя параметрами.
    Point(int x1, int y1, int z1):Point(x1, y1)
    {
        cout << "Construct Z\n";  // Вывод сообщения при вызове конструктора.
        z = z1;  // Инициализация переменной z значением z1.
    }

    // Метод для вывода значений переменных x и y.
    void Output()
    {
        cout << "X: " << x << "\tY: " << y << endl;
    }

    // Аксессор для получения значения x. Возвращает значение x.
    // Методы, которые не изменяют состояние объекта, отмечаются как const.
    int GetX()const
    {
        // x = -100; // ошибка
        return x; // Возвращение значения x.
    }

    // Аксессор для получения значения y. Возвращает значение y.
    // Методы, которые не изменяют состояние объекта, отмечаются как const.
    int GetY()const
    {
        return y; // Возвращение значения y.
    }

    // Аксессор для получения значения z. Возвращает значение z.
    // Методы, которые не изменяют состояние объекта, отмечаются как const.
    int GetZ()const
    {
        return z; // Возвращение значения z.
    }

    // Модификатор для установки значения x. Устанавливает значение x, если оно меньше или равно 100,
    // иначе выводит ошибку и устанавливает x в 0.
    void SetX(int X)
    {
        if (X > 100) // Проверка, превышает ли значение X 100.
        {
            cout << "Error\n"; // Вывод сообщения об ошибке.
            x = 0;  // Установка значения x в 0.
        }
        else
        {
            x = X; // Установка значения x в X.
        }
    }
};

int main() {
    // Создание объектов Point с разными конструкторами для демонстрации делегирования.
    //Point p1;                        // Вызов конструктора по умолчанию.
    //Point p2(10);                // Вызов конструктора с одним параметром.
    //Point p3(10, 20);        // Вызов конструктора с двумя параметрами.
    Point p4(10, 20,30); // Вызов конструктора с тремя параметрами.

    // Использование метода Output для вывода значений переменных x и y.
    //p1.Output(); // Вывод значений для объекта p1.
    //p2.Output(); // Вывод значений для объекта p2.
    //p3.Output(); // Вывод значений для объекта p3.
    p4.Output(); // Вывод значений для объекта p4.

    // Использование аксессоров для получения значений переменных x, y и z.
    //cout << "X of p4: " << p4.GetX() << endl; // Вывод значения x для объекта p4.
    //cout << "Y of p4: " << p4.GetY() << endl; // Вывод значения y для объекта p4.
    //cout << "Z of p4: " << p4.GetZ() << endl; // Вывод значения z для объекта p4.

    // Использование модификатора для изменения значения x.
    cout << endl;
    p4.SetX(50); // Установка значения x для объекта p4.
    cout << "New X of p4: " << p4.GetX() << endl; // Вывод нового значения x для объекта p4.

    return 0;
}
